import Stripe from 'stripe';
import { UserModel } from '../default/MongoModel.js';
import { checkPaymentStatus } from '../default/utils.js';
import { Markup } from 'telegraf';
import dotenv from 'dotenv';
import { translate } from '../TranslateAppi18/i18nSetup.js';
dotenv.config();
const stripe = new Stripe(process.env.STRIPE_TOKEN_TEST, {
  apiVersion: '2022-11-15'
});

const createStripeSession = async (userId, priceId) => {
  try {
    const session = await stripe.checkout.sessions.create({
      payment_method_types: ['card'],
      line_items: [{
        price: priceId, // –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ü–µ–Ω—ã –≤ Stripe
        quantity: 1,
      }],
      mode: 'subscription',
      success_url: 'https://t.me/artificial_intelligenceGPT_bot',
      cancel_url: 'https://t.me/artificial_intelligenceGPT_bot',
    });
    await UserModel.findOneAndUpdate({ userId }, { paymentID: session.id });
    return session;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–µ—Å—Å–∏–∏ –æ–ø–ª–∞—Ç—ã:', error);
  }
};

const getStripePaymentStatus = async (sessionId) => {
  try {
    const session = await stripe.checkout.sessions.retrieve(sessionId);
    return `${session.payment_status === 'paid' ? 'succeeded' : '–í –æ–±—Ä–∞–±–æ—Ç–∫–µ'}`;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–∫—É–ø–∫–∏:', error);
    throw new Error('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–∫—É–ø–∫–∏.');
  }
};



const stripePayCommand = async (ctx) => {
  const linkButton = Markup.button.callback(`1 –º–µ—Å—è—Ü 3.5$`, 'stripePay1Month');
  const linkButton2 = Markup.button.callback(`12 –º–µ—Å—è—Ü–µ–≤ 30$`, 'stripePay1Year');
  const returnCallback = Markup.button.callback(`–Ω–∞–∑–∞–¥`, 'returnbuybot');
    console.log('CTX IN STRIPEpAYcOMMAND',ctx);
  const STRIPE_INFO=translate(LanCode,"STRIPE_INFO")
  const info = `–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏.
  üí≥ –¥–∞–Ω–Ω—ã–µ —Ç–µ—Å—Ç–æ–≤–æ–π –∫–∞—Ä—Ç—ã:
  5555 5555 5555 4444123
  12/28  123
  `;
  ctx.editMessageText(info, Markup.inlineKeyboard([[linkButton], [linkButton2], [returnCallback]]));
};

export async function stripePay1month(ctx) {
  const paymentDateOut=30
  const userId = String(ctx.update.callback_query.from.id);
  const user = await UserModel.findOne({ userId });
   user.paymentDateOut=paymentDateOut
  await user.save()
  await handleStripePayment(ctx,  'price_1NcrFOBAk5P4PWWUZZqTR3GY', '–û–ø–ª–∞—Ç–∞ –±–æ—Ç–∞ –Ω–∞ 30 –¥–Ω–µ–π');
}

export async function stripePay1Year(ctx) {
  const paymentDateOut=365
  const userId = String(ctx.update.callback_query.from.id);
  const user = await UserModel.findOne({ userId });
   user.paymentDateOut=paymentDateOut
  await user.save()

  await handleStripePayment(ctx,  'price_1Ncrg3BAk5P4PWWUjNwOcCBG', '–û–ø–ª–∞—Ç–∞ –±–æ—Ç–∞ –Ω–∞ 1 –≥–æ–¥');
}

const handleStripePayment = async (ctx,  priceId, description) => {
  const userId = String(ctx.update.callback_query.from.id);
  const session = await createStripeSession(userId, priceId);
  const url = session.url;
  const linkButton = Markup.button.url('–æ–ø–ª–∞—Ç–∏—Ç—å', url);
  const payinfo = `${description}, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –∏ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—É—é –ø–ª–∞—Ç–µ–∂–Ω—É—é —Å–∏—Å—Ç–µ–º—É Stripe. –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã 
  üí≥ –¥–∞–Ω–Ω—ã–µ —Ç–µ—Å—Ç–æ–≤–æ–π –∫–∞—Ä—Ç—ã:
  5555 5555 5555 4444
  12/28  123
  `;
  const statusStripe = Markup.button.callback(`—Å—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã üîÑ`, 'status_stripe');
  const returnPay = Markup.button.callback(`–Ω–∞–∑–∞–¥`, 'stripe');
  ctx.editMessageText(payinfo, Markup.inlineKeyboard([[linkButton], [statusStripe], [returnPay]]));
}

const stripeStatusPay = async (ctx) => {
  const userId = String(ctx.update.callback_query.from.id);
  const user = await UserModel.findOne({ userId });

  if (!user) {
    ctx.answerCbQuery('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
    return;
  }

  try {
    const paymentStatus = await getStripePaymentStatus(user.paymentID);

    if (paymentStatus === 'succeeded') {
      user.paymentDate = new Date();
      ctx.editMessageText(`–û–≥—Ä–æ–º–Ω–æ–µ —Å–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞! ü§ñüéâ –ñ–µ–ª–∞–µ–º –≤–∞–º –º–æ—Ä–µ —É—Å–ø–µ—Ö–æ–≤ –≤ –µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏! üí™üöÄ. –≤—Ä–µ–º—è –æ–ø–ª–∞—Ç—ã:${user.paymentDate}} /timeout - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –æ—Å—Ç–≤–∞—à–∏–µ–π—Å—è –≤—Ä–µ–º—è –ø–æ–¥–ø–∏—Å–∫–∏. 
       /donation - –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø–æ–º–æ—á—å —Ä–∞–∑–≤–∏—Ç–∏—é –±–æ—Ç–∞.`);
      await checkPaymentStatus(userId);
    } else {
      ctx.answerCbQuery('–ü–õ–ê–¢–ï–ñ –°–û–ó–î–ê–ù –ò –ñ–î–ï–¢ –û–ü–õ–ê–¢–´');
    }

    user.statusPay = paymentStatus;
    await user.save();
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–∫—É–ø–∫–∏:', error);
    ctx.answerCbQuery('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–ª–∞—Ç–µ–∂–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
};

export { stripePayCommand, stripeStatusPay };