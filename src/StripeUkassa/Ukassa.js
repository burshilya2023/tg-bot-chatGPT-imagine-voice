import { YooCheckout } from '@a2seven/yoo-checkout';
import { checkPaymentStatus, timeoutCommand } from '../default/utils.js';
import { UserModel } from '../default/MongoModel.js';
import { Markup } from 'telegraf';
import { payinfoMounthUkassa, payinfoYearUkassa } from '../const.js';
import dotenv from 'dotenv';
dotenv.config();
const YOO_KASSA_CONFIG = {
  shopId: '236017',
  secretKey: process.env.UKASSA_TOKEN_TEST,
  isTest: true,
};

const yooKassa = new YooCheckout(YOO_KASSA_CONFIG);

const createPayment = async (userId, orderAmount) => {
  const orderId = Math.floor(Math.random() * (10000 - 1 + 1)) + Date.now();
  const description = `–ü–ª–∞—Ç–µ–∂ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`;
  
  const createPayload = {
    amount: { value: orderAmount, currency: 'RUB' },
    payment_method_data: { type: 'bank_card' },
    confirmation: { type: 'redirect', return_url: 'https://t.me/artificial_intelligenceGPT_bot' },
    capture: true,
    description,
  }; 
  
  return yooKassa.createPayment(createPayload, orderId);
};

const handlePayment = async (ctx, amount, description) => {
  try {
    const userId = String(ctx.update.callback_query.from.id);
    const payment = await createPayment(userId, amount);
    const paymentInfo = await yooKassa.getPayment(payment.id);
    const user = await UserModel.findOne({ userId });
    user.paymentID = payment.id;
    user.statusPay = paymentInfo.status;
    await user.save();
    
    
    if (paymentInfo.status === 'succeeded') {
      user.paymentDate = new Date();
       timeoutCommand(ctx);
      await user.save();
    } else {
      const paymentUrlUkassa = payment.confirmation.confirmation_url;
      const linkButton = Markup.button.url(`${amount} —Ä–æ—Å.—Ä—É–± üá∑üá∫`, paymentUrlUkassa);
      const statusUkassa = Markup.button.callback(`—Å—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã üîÑ`, 'statusUkassa');
      const returnPay = Markup.button.callback(`–Ω–∞–∑–∞–¥`, 'ukassa');
      ctx.editMessageText(`${description} 
      üí≥ –¥–∞–Ω–Ω—ã–µ —Ç–µ—Å—Ç–æ–≤–æ–π –∫–∞—Ä—Ç—ã:
      5555 5555 5555 4444
      12/28  123`, Markup.inlineKeyboard([[linkButton], [statusUkassa], [returnPay]]));
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ handlePayment:', error);
    ctx.reply('–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞, –∏–∑–≤–∏–Ω–∏—Ç–µ');
  }
};

export const UkassaPaymentCommand = async (ctx) => {
  const linkButton = Markup.button.callback(`1 –º–µ—Å—è—Ü 350 —Ä–æ—Å.—Ä—É–± üá∑üá∫`, 'ukassaPay1Month');
  const linkButton2 = Markup.button.callback(`12 –º–µ—Å—è—Ü–µ–≤ 3500 —Ä–æ—Å.—Ä—É–± üá∑üá∫`, 'ukassaPay1Year');
  const returnCallback = Markup.button.callback(`–Ω–∞–∑–∞–¥`, 'returnbuybot');
  const info = `–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏.
  üí≥ –¥–∞–Ω–Ω—ã–µ —Ç–µ—Å—Ç–æ–≤–æ–π –∫–∞—Ä—Ç—ã:
  5555 5555 5555 4444
  12/28  123
  `;
  ctx.editMessageText(info, Markup.inlineKeyboard([[linkButton], [linkButton2], [returnCallback]]));
};

export async function ukassaPay1month(ctx) {
  const description = payinfoMounthUkassa;
  const paymentDateOut=30
  const userId = String(ctx.update.callback_query.from.id);
  const user = await UserModel.findOne({ userId });
   user.paymentDateOut=paymentDateOut
  await user.save()
  await handlePayment(ctx, 350, description,paymentDateOut);
}

export async function ukassaPay1Year(ctx) {
  const description = payinfoYearUkassa;
  const paymentDateOut=365
  const userId = String(ctx.update.callback_query.from.id);
  const user = await UserModel.findOne({ userId });
   user.paymentDateOut=paymentDateOut
  await user.save()
  await handlePayment(ctx, 3000, description, paymentDateOut);
}

export const statusUkassa = async (ctx) => {
  const userId = String(ctx.update.callback_query.from.id);
  const user = await UserModel.findOne({ userId });

  try {
    const paymentInfo = await yooKassa.getPayment(user.paymentID);
    const getStatus = paymentInfo.status;

    if (getStatus === 'succeeded') {
      const currentDate = new Date();
      user.paymentDate = currentDate; 
      ctx.editMessageText(`${getStatus} –û–≥—Ä–æ–º–Ω–æ–µ —Å–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞! ü§ñüéâ –ñ–µ–ª–∞–µ–º –≤–∞–º –º–æ—Ä–µ —É—Å–ø–µ—Ö–æ–≤ –≤ –µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏! üí™üöÄ. –≤—Ä–µ–º—è –æ–ø–ª–∞—Ç—ã:${user.paymentDate} /timeout - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –æ—Å—Ç–≤–∞—à–∏–µ–π—Å—è –≤—Ä–µ–º—è –ø–æ–¥–ø–∏—Å–∫–∏. 
      /donation - –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø–æ–º–æ—á—å —Ä–∞–∑–≤–∏—Ç–∏—é –±–æ—Ç–∞.`);
      user.statusPay = getStatus;
      await user.save();
      await checkPaymentStatus(userId);
    } else {
      ctx.answerCbQuery(`üí∞–°–¢–ê–¢–£–° –ü–õ–ê–¢–ï–ñ–ê: ${getStatus.toUpperCase()}`);
      user.statusPay = getStatus;
      await user.save();
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–ª–∞—Ç–µ–∂–µ:', error);
    ctx.answerCbQuery('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–ª–∞—Ç–µ–∂–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
};
